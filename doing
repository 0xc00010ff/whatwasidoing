#! /usr/bin/ruby
# ____        _
# |  _ \  ___ (_)_ __   __ _
# | | | |/ _ \| | '_ \ / _` |
# | |_| | (_) | | | | | (_| |
# |____/ \___/|_|_| |_|\__, |
#                      |___/
#
# Keeps track of the one thing you should be focusing on.
# A managment tool for spread-thinners. Really a one line todo list for idiots.
# Usage:
# cmd: "doing something or another"
# > something or another
# cmd: "wwid"
# > something or another

FILE_NAME_TODO = "/var/tmp/.doing-#{File.basename(Dir.getwd)}"

_currentTodo = ""


def help
  puts <<-HEREDOC
doing: a singular todo list for multitaskers.

Its a todo list for the current directory with one todo.

Setting the todo: `doing [whatever you\'re doing]`
Checking the todo: `doing`
Completing the todo: `doing done` or `doing clear`
Help: `doing --help`

  HEREDOC
end

def todoExists
  exists = File.exist? FILE_NAME_TODO
  exists
end

def writeTodo(todo)
  File.open(FILE_NAME_TODO, 'w') { |file| file.write(todo) }
end

def readTodo
  File.open(FILE_NAME_TODO, 'r') do |file|
    file.each_line do |line|
      puts "\n🔹  #{line}\n\n"
    end
  end
end

def removeFile
  if todoExists
    File.delete FILE_NAME_TODO
  end
  exit
end

# # Main # #

# grab the current todo in case we need it
if todoExists
  File.open(FILE_NAME_TODO, 'r') do |file|
    file.each_line do |line|
      _currentTodo += line
    end
  end
end

# grab any arguments / new todos from the command line
todo = ARGV.join(' ').strip()

# show help when no todo is set
if !todoExists and (todo.nil? or todo.empty?)
  help
  exit
end

# catch help option
HELP_OPTIONS = ['help', '--help', '-h']

if HELP_OPTIONS.any? { |option| option == todo }
  help
  exit
end

# catch done marker
if todo == 'done'
  # put a checkmark next to the todo
  if todoExists
    File.open(FILE_NAME_TODO, 'r') do |file|
      file.each_line do
        |line| puts "✅  #{line}"
      end
    end
  end

  removeFile
  exit
end


# catch clear marker
if todo == 'clear' or todo == 'cancel'
  puts 'Incinerating the todo.. 🔥'
  removeFile
  exit
end

# catch commit marker
if todo == 'commit' || todo == '-c'
  puts '⏳ Committing...'
  commit = "git commit -m \"#{_currentTodo}\""
  puts commit
  `#{commit}`
  puts 'Done! Committed! ✨✅✨'
  removeFile
end


# # normal operations. file the todo or read it back

# if there is a todo
if not todo.nil? and not todo.empty?
  # write the todo
  writeTodo todo
  # confirm the todo
  puts "\n🔸  #{todo}\n\n"
else # we just want the current todo
  # read the todo
  readTodo
end


exit
